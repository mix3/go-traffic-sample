box: wercker/golang
# Add services here
services:
  - wercker/mysql
  - wercker/postgresql
# Build definition
build:
  # The steps that will be executed on build
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get ./...
          go get github.com/axw/gocov/gocov
          go get github.com/mattn/goveralls

    # Build the project
    - script:
        name: go build
        code: |
          go build ./...

    # Test the project
    - script:
        name: go test with sqlite
        code: |
          go test ./...

    - script:
        name: go test with mysql
        code: |
          DB=mysql DSN="$WERCKER_MYSQL_USERNAME:$WERCKER_MYSQL_PASSWORD@tcp($WERCKER_MYSQL_HOST:$WERCKER_MYSQL_PORT)/$WERCKER_MYSQL_DATABASE" go test ./...

    - script:
        name: go test with postgres
        code: |
          DB=postgres DSN="user=$WERCKER_POSTGRESQL_USERNAME password=$WERCKER_POSTGRESQL_PASSWORD host=$WERCKER_POSTGRESQL_HOST port=$WERCKER_POSTGRESQL_PORT dbname=$WERCKER_POSTGRESQL_DATABASE sslmode=disable" go test ./...

    - script:
        name: go test -cover
        code: |
          echo "mode: count" > acc.out
          for t in `go test ./... | awk '{print $2}'`; do go test -covermode=count -coverprofile=profile.out $t; if [ -f profile.out ]; then cat profile.out | grep -v "mode: count" >> acc.out; fi; done
          goveralls -coverprofile=acc.out -service='wercker.com' -repotoken=$COVERALLS_TOKEN
          rm -rf ./profile.out
          rm -rf ./acc.out
